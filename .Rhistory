# plot the Limbs vs ShipID
ggplot(pirates, aes(x = Limbs, y = ShipID)) +
geom_point()
# color the plot of Limbs vs ShipID by Origin
ggplot(pirates, aes(x = Limbs, y = ShipID, color = Origin)) +
geom_point()
# color the plot of Limbs vs ShipID by Origin
ggplot(pirates, aes(x = Limbs, y = ShipID, color = Origin)) +
geom_count()
# cretae a scatter plot the Origin vs Limbs
ggplot(data = pirates, aes(x = Origin, y = Limbs)) +
geom_point()
# change to a boxplot of Origin vs Limbs
ggplot(data = pirates, aes(x = Origin, y = Limbs)) +
geom_boxplot()
# cretae a scatter plot the Teeth vs Limbs
ggplot(data = pirates, aes(x = Teeth, y = Limbs)) +
geom_point()
source("~/.active-rstudio-document", echo=TRUE)
# cretae a scatter plot the Limbs vs Teeth
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_point()
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_point()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count() +
facet_wrap(~ Origin)
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot()
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
?grepl
grepl("0.5" pirates$Limbs)
grepl("0.5", pirates$Limbs)
pirates[with(pirates, grepl("0.5", pirates$Limbs)), ]
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# check the pirates with half limbs
pirates[pirates$Limbs == "2.5", ]
# remove the row of data for the pirate with 2.5 Limbs
pirates <- pirates(-c(753), )
# remove the row of data for the pirate with 2.5 Limbs
pirates <- pirates[-c(753), ]
# re-plot to verify the change in the data
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot()
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# import the pirate data
pirates <- read.csv("/Users/bamflappy/Documents/rPlayground/PiratesPirate.csv")
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# check the data for the outlier pirate with 2.5 Limbs
pirates[pirates$Limbs == "2.5", ]
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
?factor''
?factor
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# use the facotr function to make the different numbers of Limbs into categories
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# look up color options on the internet by searching "ggplot boxplot color"
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# create a separate boxplot for each Origin of pirates
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2) +
facet_wrap(~ Origin)
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 3 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="BuPu")
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="purple", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="purple", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# view the first few lines of data
head(pirates)
# change the appearance of the individual plot titles
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(ShipID ~ Origin)
ships <- read.csv("/Users/bamflappy/Repos/rPlayground/data/PiratesShip.csv")
summary(ships)
mean(ships$CrewCapacity)
sum(ships$CrewCapacity)
swetwd
setwd
?setwd
#Load the edgeR library
library("edgeR")
?heatmap
#Install biomaRt, this should only need to be done once
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
BiocManager::install("biomaRt")
#Install edgeR, this should only need to be done once
BiocManager::install("edgeR")
#Load libraries
library(edgeR)
library(ggplot2)
library(biomaRt)
#Give an Ensembl archive version as a parameter to get the list of archived Ensembl marts
#Mus_musculus.GRCm39
listEnsembl(GRCm=39)
?listEnsembl
?listMarts
?useEnsembl
#Retrieve the list of all the species available (mart datasets) for a given mart
ensembl = useEnsembl(biomart="ensembl")
head(listDatasets(ensembl))
View(listDatasets(ensembl))
#Connect to a an ensembl website mart by specifying a BioMart and dataset parameters
#Mus_musculus.GRCm39
ensembl = useEnsembl(biomart="ensembl", dataset="mmusculus_gene_ensembl")
head(listDatasets(ensembl))
# set the working directory
#setwd("/YOUR/FILE/PATH/")
setwd("/Users/bamflappy/Repos/wpPlayground/")
# import libraries
library(edgeR)
library(ggplot2)
library(ghibli)
# import gene count data
tribolium_counts <- read.csv("data/TriboliumCounts.csv", row.names="X")
tail(tribolium_counts)
#Add grouping factor
group <- factor(c(rep("cntrl_4h",3), rep("treat_4h",3), rep("cntrl_24h",3), rep("treat_24h",3)))
# view available palettes
par(mfrow=c(9,3))
for(i in names(ghibli_palettes)) print(ghibli_palette(i))
dev.off()
for(i in names(ghibli_palettes)) print(ghibli_palette(i))
dev.off()
# view available palettes
par(mfrow=c(9,3))
for(i in names(ghibli_palettes)) print(ghibli_palette(i))
dev.off()
#Add grouping factor
group <- factor(c(rep("cntrl_4h",3), rep("treat_4h",3), rep("cntrl_24h",3), rep("treat_24h",3)))
#Create DGE list object
list <- DGEList(counts=tribolium_counts,group=group)
barplot(list$samples$lib.size*1e-6, names=1:12, ylab="Library size (millions)")
#Plot the library sizes before normalization and write to a jpg file
jpeg("plots/dev/exactTest_librarySizes.jpg")
barplot(list$samples$lib.size*1e-6, names=1:12, ylab="Library size (millions)")
dev.off()
#There is no purpose in analyzing genes that are not expressed in either
# experimental condition, so genes are first filtered on expression levels
keep <- filterByExpr(list)
table(keep)
list <- list[keep, , keep.lib.sizes=FALSE]
#Calculate normalized factors
list <- calcNormFactors(list)
normList <- cpm(list, normalized.lib.sizes=TRUE)
#Write the normalized counts to a file
write.table(normList, file="data/tribolium_normalizedCounts.csv", sep=",", row.names=TRUE)
#View normalization factors
list$samples
dim(list)
#Use a MDS plot to visualizes the differences
# between the expression profiles of different samples
points <- c(0,1,2,3,15,16,17,18)
# retrieve the vector of colors associated with PonyoMedium
(ghibli_colors <- ghibli_palette("PonyoMedium", type = "discrete"))
ghibli_subset <- c(ghibli_colors[3], ghibli_colors[6], ghibli_colors[4])
# retrieve the vector of colors associated with PonyoMedium
(ghibli_colors <- ghibli_palette("PonyoMedium", type = "discrete"))
dev.off()
# retrieve the vector of colors associated with PonyoMedium
(ghibli_colors <- ghibli_palette("PonyoMedium", type = "discrete"))
# retrieve the vector of colors associated with PonyoMedium
ghibli_colors <- ghibli_palette("PonyoMedium", type = "discrete")
ghibli_subset <- c(ghibli_colors[3], ghibli_colors[6], ghibli_colors[4])
colors <- rep(c(ghibli_colors[3], ghibli_colors[6], ghibli_colors[4], ghibli_colors[1]), 2)
plotMDS(list, col=colors[group], pch=points[group])
#Write plot without legend to file
jpeg("plots/dev/exactTest_MDS_withoutLegend.jpg")
plotMDS(list, col=colors[group], pch=points[group])
dev.off()
plotMDS(list, col=colors[group], pch=points[group])
legend("topleft", legend=levels(group), pch=points, col=colors, ncol=2)
#Write plot with legend to file
jpeg("plots/dev/exactTest_MDS_withLegend.jpg")
plotMDS(list, col=colors[group], pch=points[group])
legend("topleft", legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
# Add extra space to right of plot area; change clipping to figure
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
# Add extra space to right of plot area; change clipping to figure
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.2,0), legend=levels(group), pch=points, col=colors, ncol=2)
legend("topright", inset=c(-1,0), legend=levels(group), pch=points, col=colors, ncol=2)
legend("topright", inset=c(-0.5,0), legend=levels(group), pch=points, col=colors, ncol=2)
legend("topright", inset=c(-0.75,0), legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
# Add extra space to right of plot area; change clipping to figure
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.75,0), legend=levels(group), pch=points, col=colors, ncol=2)
legend("bottom", inset=c(-0.75,0), legend=levels(group), pch=points, col=colors, ncol=2)
# Add extra space to right of plot area; change clipping to figure
jpeg("plots/dev/exactTest_MDS.jpg")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.75,0), legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
# Add extra space to right of plot area; change clipping to figure
jpeg("plots/dev/exactTest_MDS.jpg")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.75,0), legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
# Add extra space to right of plot area; change clipping to figure
jpeg("plots/dev/exactTest_MDS.jpg")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.02,0), legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
# Add extra space to right of plot area; change clipping to figure
jpeg("plots/dev/exactTest_MDS.jpg")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.5,0), legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.5,0), legend=levels(group), pch=points, col=colors)
legend("topright", inset=c(-0.25,0), legend=levels(group), pch=points, col=colors)
legend("topright", inset=c(-0.3,0), legend=levels(group), pch=points, col=colors)
legend("topright", inset=c(-0.4,0), legend=levels(group), pch=points, col=colors)
dev.off()
# Add extra space to right of plot area; change clipping to figure
jpeg("plots/dev/exactTest_MDS.jpg")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.4,0), legend=levels(group), pch=points, col=colors)
dev.off()
# Add extra space to right of plot area; change clipping to figure
jpeg("plots/dev/exactTest_MDS.jpg")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.25,0), legend=levels(group), pch=points, col=colors)
dev.off()
# Add extra space to right of plot area; change clipping to figure
jpeg("plots/dev/exactTest_MDS.jpg")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plotMDS(list, col=colors[group], pch=points[group])
legend("topright", inset=c(-0.28,0), legend=levels(group), pch=points, col=colors)
dev.off()
dev.off()
#Calculate the log CPM of the gene count data
logcpm <- cpm(list, log=TRUE)
heatmap(logcpm)
#Draw a heatmap of individual RNA-seq samples using moderated
# log-counts-per-million after normalization
jpeg("plots/dev/exactTest_logCPM.jpg")
heatmap(logcpm)
dev.off()
?heatmap
#Draw a heatmap of individual RNA-seq samples using moderated
# log-counts-per-million after normalization
jpeg("plots/dev/exactTest_hclust.jpg")
heatmap(logcpm)
dev.off()
#Produce a matrix of pseudo-counts
#Estimate common dispersion and tagwise dispersions
list <- estimateDisp(list)
list$common.dispersion
plotBCV(list)
#View dispersion estimates and biological coefficient of variation
jpeg("plots/dev/exactTest_BCV.jpg")
plotBCV(list)
dev.off()
##
#Perform an exact test for treat_4h vs ctrl_4h
tested_4h <- exactTest(list, pair=c("cntrl_4h", "treat_4h"))
#Create results table of DE genes
resultsTbl_4h <- topTags(tested_4h, n=nrow(tested_4h$table))$table
#Create a table of DE genes filtered by FDR
resultsTbl_4h.keep <- resultsTbl_4h$FDR <= 0.05
resultsTbl_4h_filtered <- resultsTbl_4h[resultsTbl_4h.keep,]
#Write the results of the exact tests to a csv file
write.table(resultsTbl_4h_filtered, file="data/exactTest_4h_filtered.csv", sep=",", row.names=TRUE)
#Look at the counts-per-million in individual samples for the top genes
o <- order(tested_4h$table$PValue)
cpm(list)[o[1:10],]
#View the total number of differentially expressed genes at a p-value of 0.05
summary(decideTests(tested_4h))
#Plot log-fold change against log-counts per million, with DE genes highlighted
#The blue lines indicate 2-fold changes
jpeg("plots/dev/exactTest_4h_DE.jpg")
plotMD(tested_4h)
abline(h=c(-1, 1), col="blue")
dev.off()
#Make a mean-difference plot of two libraries of count data with smearing of points
#  with very low counts, especially those that are zero for one of the columns
jpeg("plots/dev/exactTest_4h_smear.jpg")
plotSmear(tested_4h)
dev.off()
#Identify significantly DE genes
resultsTbl_4h$topDE <- "NA"
resultsTbl_4h$topDE[resultsTbl_4h$logFC > 1 & resultsTbl_4h$FDR < 0.05] <- "UP"
resultsTbl_4h$topDE[resultsTbl_4h$logFC < -1 & resultsTbl_4h$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/exactTest_4h_volcano.jpg")
ggplot(data=resultsTbl_4h, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
##
#Perform an exact test for treat_24h vs ctrl_24h
tested_24h <- exactTest(list, pair=c("cntrl_24h", "treat_24h"))
#Create a table of DE genes filtered by FDR
resultsTbl_24h <- topTags(tested_24h, n=nrow(tested_24h$table))$table
#Create filtered results table of DE genes
resultsTbl_24h.keep <- resultsTbl_24h$FDR <= 0.05
resultsTbl_24h_filtered <- resultsTbl_24h[resultsTbl_24h.keep,]
#Write the results of the exact tests to a csv file
write.table(resultsTbl_24h_filtered, file="data/exactTest_24h_filtered.csv", sep=",", row.names=TRUE)
#Look at the counts-per-million in individual samples for the top genes
o <- order(tested_24h$table$PValue)
cpm(list)[o[1:10],]
#View the total number of differentially expressed genes at a p-value of 0.05
summary(decideTests(tested_24h))
#Plot log-fold change against log-counts per million, with DE genes highlighted
#The blue lines indicate 2-fold changes
jpeg("plots/dev/exactTest_24h_DE.jpg")
plotMD(tested_24h)
abline(h=c(-1, 1), col="blue")
dev.off()
#Make a mean-difference plot of two libraries of count data with smearing of points
#  with very low counts, especially those that are zero for one of the columns
jpeg("plots/dev/exactTest_24h_smear.jpg")
plotSmear(tested_24h)
dev.off()
#Identify significantly DE genes
resultsTbl_24h$topDE <- "NA"
resultsTbl_24h$topDE[resultsTbl_24h$logFC > 1 & resultsTbl_24h$FDR < 0.05] <- "UP"
resultsTbl_24h$topDE[resultsTbl_24h$logFC < -1 & resultsTbl_24h$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/exactTest_24h_volcano.jpg")
ggplot(data=resultsTbl_24h, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
##
#Perform an exact test for treat_4h vs treat_24h
tested_treat <- exactTest(list, pair=c("treat_24h", "treat_4h"))
#Create a table of DE genes filtered by FDR
resultsTbl_treat <- topTags(tested_treat, n=nrow(tested_treat$table))$table
#Create filtered results table of DE genes
resultsTbl_treat.keep <- resultsTbl_treat$FDR <= 0.05
resultsTbl_treat_filtered <- resultsTbl_treat[resultsTbl_treat.keep,]
#Write the results of the exact tests to a csv file
write.table(resultsTbl_treat_filtered, file="data/exactTest_treat_filtered.csv", sep=",", row.names=TRUE)
#Look at the counts-per-million in individual samples for the top genes
o <- order(tested_treat$table$PValue)
cpm(list)[o[1:10],]
#View the total number of differentially expressed genes at a p-value of 0.05
summary(decideTests(tested_treat))
#Plot log-fold change against log-counts per million, with DE genes highlighted
#The blue lines indicate 2-fold changes
jpeg("plots/dev/exactTest_treat_DE.jpg")
plotMD(tested_treat)
abline(h=c(-1, 1), col="blue")
dev.off()
#Make a mean-difference plot of two libraries of count data with smearing of points
#  with very low counts, especially those that are zero for one of the columns
jpeg("plots/dev/exactTest_treat_smear.jpg")
plotSmear(tested_treat)
dev.off()
#Identify significantly DE genes
resultsTbl_treat$topDE <- "NA"
resultsTbl_treat$topDE[resultsTbl_treat$logFC > 1 & resultsTbl_treat$FDR < 0.05] <- "UP"
resultsTbl_treat$topDE[resultsTbl_treat$logFC < -1 & resultsTbl_treat$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/exactTest_treat_volcano.jpg")
ggplot(data=resultsTbl_treat, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
##############
#Perform an exact test for cntrl_4h vs ctrl_24h
tested_cntrl <- exactTest(list, pair=c("cntrl_24h", "cntrl_4h"))
#Create a table of DE genes filtered by FDR
resultsTbl_nctrl <- topTags(tested_cntrl, n=nrow(tested_cntrl$table))$table
#Create filtered results table of DE genes
resultsTbl_ctrl.keep <- resultsTbl_nctrl$FDR <= 0.05
resultsTbl_cntrl_filtered <- resultsTbl_nctrl[resultsTbl_ctrl.keep,]
#Write the results of the exact tests to a csv file
write.table(resultsTbl_cntrl_filtered, file="data/exactTest_cntrl_filtered.csv", sep=",", row.names=TRUE)
#Look at the counts-per-million in individual samples for the top genes
o <- order(tested_cntrl$table$PValue)
cpm(list)[o[1:10],]
#View the total number of differentially expressed genes at a p-value of 0.05
summary(decideTests(tested_cntrl))
#Plot log-fold change against log-counts per million, with DE genes highlighted
#The blue lines indicate 2-fold changes
jpeg("plots/dev/exactTest_cntrl_DE.jpg")
plotMD(tested_cntrl)
abline(h=c(-1, 1), col="blue")
dev.off()
#Make a mean-difference plot of two libraries of count data with smearing of points
#  with very low counts, especially those that are zero for one of the columns
jpeg("plots/dev/exactTest_cntrl_smear.jpg")
plotSmear(tested_cntrl)
dev.off()
#Identify significantly DE genes
resultsTbl_nctrl$topDE <- "NA"
resultsTbl_nctrl$topDE[resultsTbl_nctrl$logFC > 1 & resultsTbl_nctrl$FDR < 0.05] <- "UP"
resultsTbl_nctrl$topDE[resultsTbl_nctrl$logFC < -1 & resultsTbl_nctrl$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/exactTest_cntrl_volcano.jpg")
ggplot(data=resultsTbl_nctrl, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
